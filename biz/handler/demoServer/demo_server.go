// Code generated by hertz generator.

package demoServer

import (
	"context"
	"demoProject/dataAccess"
	"errors"
	"gorm.io/gorm"

	demoServer "demoProject/biz/model/demoServer"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// TreeStructure .
// @router /treeStructure [GET]
func TreeStructure(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demoServer.TreeStructureRes
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(demoServer.TreeStructureResp)
	resp.Data, err = dataAccess.GetTreeStructure()
	if err != nil {
		resp.Info = err.Error()
		if errors.Is(err, gorm.ErrRecordNotFound) {
			resp.Code = 2
			resp.Info = gorm.ErrRecordNotFound.Error()
			c.JSON(consts.StatusOK, resp)
		} else {
			resp.Code = 1
			resp.Info = err.Error()
			c.JSON(consts.StatusInternalServerError, resp)
		}
	} else {
		resp.Info = "success"
		resp.Code = 0
		c.JSON(consts.StatusOK, resp)
	}
}

// StuInformation .
// @router /stuInformation [GET]
func StuInformation(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demoServer.StuInfoRes
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(demoServer.StuInfoResp)
	resp.Data = demoServer.NewStuInfoRespData()
	//get data
	resp.Data.Name, err = dataAccess.GetStuName(req.GetID())
	if err != nil {
		resp.Code = 1
		resp.Info = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)

	}
	resp.Data.Accuracy, err = dataAccess.GetStudentAccuracyInfo("", req.GetID())
	if err != nil {
		resp.Code = 1
		resp.Info = err.Error()
		c.JSON(consts.StatusInternalServerError, resp)

	}
	resp.Data.ID = req.GetID()
	resp.Code = 0
	resp.Info = "success"
	c.JSON(consts.StatusOK, resp)
}

// ExamList .
// @router /examList [GET]
func ExamList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req demoServer.ExamListRes
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(demoServer.ExamListResp)

	c.JSON(consts.StatusOK, resp)
}
